from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import Message, ContentTypes, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from main import dp, bot
from aiogram.dispatcher.filters import Command
from data import config
from database import functions
from keyboards import keys


def ikb_user(table):
    keyboard = InlineKeyboardMarkup(row_width=1)
    names = functions.admin_get_req(table)
    if names:
        materials = [name[0] for name in names]
        for material in materials:
            button = InlineKeyboardButton(material, callback_data=f"adm_{table}_{material}")
            keyboard.add(button)
        button = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data=f"back_to_admin_menu")
        keyboard.add(button)
        return keyboard
    else:
        return None


@dp.message_handler(Command('admin'), state='*')
async def admin(message: Message, state: FSMContext):
    await state.finish()
    if message.from_user.id in config.ADMINS:
        await bot.send_message(chat_id=message.chat.id,
                               text='–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª:', reply_markup=keys.admin_menu(), parse_mode='html')
    else:
        await bot.send_message(chat_id=message.from_user.id,
                               text='–í—ã –Ω–µ –∞–¥–º–∏–Ω', reply_markup=keys.main_markup())


@dp.callback_query_handler(lambda c: c.data == 'back_to_admin_menu')
async def support_request(callback: CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=keys.admin_menu())


@dp.callback_query_handler(lambda c: c.data == 'req_material')
async def support_request(callback: CallbackQuery):
    keyboard = ikb_user('requests')
    if keyboard:
        await callback.message.edit_reply_markup(reply_markup=keyboard)
    else:
        await callback.message.answer(text=f'–£ –≤–∞—Å –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞')


@dp.callback_query_handler(lambda c: c.data == 'req_anc')
async def support_request(callback: CallbackQuery):
    keyboard = ikb_user('anc')
    if keyboard:
        await callback.message.edit_reply_markup(reply_markup=keyboard)
    else:
        await callback.message.answer(text=f'–£ –≤–∞—Å –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞')


@dp.callback_query_handler(lambda c: c.data == 'req_payment')
async def support_request(callback: CallbackQuery):
    keyboard = ikb_user('money')
    if keyboard:
        await callback.message.edit_reply_markup(reply_markup=keyboard)
    else:
        await callback.message.answer(text=f'–£ –≤–∞—Å –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞')


@dp.callback_query_handler(lambda c: c.data.startswith('adm_'))
async def process_product_selection(callback: CallbackQuery):
    req_type = callback.data.split('_')[1]
    type_id = callback.data.split('_')[2]

    if req_type == 'requests':
        try:
            description = functions.admin_get_info_req(req_type, type_id)

            for request in description:
                request_id = request[0]
                user_id = request[1]
                date = request[2]
                status = request[3]

                keyboard = InlineKeyboardMarkup()
                keyboard.add(keys.ikb('üëç', f'accept_{req_type}_{request_id}'),
                             keys.ikb('üëé', f'cancel_{req_type}_{request_id}'))

                await callback.message.answer(
                    text=f'–ó–∞—è–≤–∫–∞ ‚Ññ{request_id}\n\n'
                         f'User: <b>{user_id}</b>\n'
                         f'–î–∞—Ç–∞: <b>{date[:16]}</b>\n', reply_markup=keyboard,
                    parse_mode='html'
                )
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏: {e}")

    if req_type == 'anc':
        try:
            description = functions.admin_get_info_req(req_type, type_id)

            for request in description:
                request_id = request[0]
                user_id = request[1]
                date = request[2]
                link = request[3]
                status = request[4]

                keyboard = InlineKeyboardMarkup()
                keyboard.add(keys.ikb('üëç', f'accept_{req_type}_{request_id}'),
                             keys.ikb('üëé', f'cancel_{req_type}_{request_id}'))

                await callback.message.answer(
                    text=f'–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–≤—Ä–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è ‚Ññ{request_id}\n\n'
                         f'User: <b>{user_id}</b>\n'
                         f'–î–∞—Ç–∞: <b>{date[:16]}</b>\n'
                         f'–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: <b>{link}</b>\n', reply_markup=keyboard,
                    parse_mode='html'
                )

        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏: {e}")

    if req_type == 'money':
        try:
            description = functions.admin_get_info_req(req_type, type_id)
            for request in description:
                request_id = request[0]
                requisite = request[1]
                value = request[3]
                date = request[4]
                status = request[5]

                keyboard = InlineKeyboardMarkup()
                keyboard.add(keys.ikb('üëç', f'accept_{req_type}_{request_id}'),
                             keys.ikb('üëé', f'cancel_{req_type}_{request_id}'))

                await callback.message.answer(
                    text=f'–ó–∞—è–≤–∫–∞ ‚Ññ{request_id}\n\n'
                         f'–°—É–º–º–∞: <b>{value}</b>—Ä\n'
                         f'–†–µ–∫–≤–∏–∑–∏—Ç—ã: <b>{requisite}</b>\n'
                         f'–î–∞—Ç–∞: <b>{date[:16]}</b>\n', reply_markup=keyboard,
                    parse_mode='html'
                )

        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏: {e}")


@dp.callback_query_handler(lambda callback: callback.data.startswith(('accept_', 'cancel_')))
async def handle_confirmation(callback: CallbackQuery):
    action, req_type, type_id = callback.data.split('_')
    user_id = callback.from_user.id

    if action == "accept":

        if req_type == 'anc':
            functions.update_status_and_get_user_id(req_type, type_id, 2)
            text = '–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–Ω–æ, –Ω–∞ –≤–∞—à —Å—á–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–Ω–æ <b>300—Ä</b>.'
            functions.update_user_balance(user_id, 300, '+')
            await bot.delete_message(callback.message.chat.id, callback.message.message_id)
            await bot.send_message(user_id, text, reply_markup=keys.main_markup(), parse_mode='html')
        if req_type == 'money':
            # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–Ω—è—Ç–∏—è –¥–µ–Ω–µ–≥ —Å–æ —Å—á–µ—Ç–∞
            functions.update_status_and_get_user_id(req_type, type_id, 2)
            text = '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ–¥–æ–±—Ä–µ–Ω–Ω–∞.'
            await bot.delete_message(callback.message.chat.id, callback.message.message_id)
            await bot.send_message(user_id, text, reply_markup=keys.main_markup(), parse_mode='html')
        if req_type == 'requests':
        # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            phone = functions.give_phone_for_user(int(callback.from_user.id))
            functions.update_status_phone_and_get_user_id(1, phone, callback.from_user.id, req_type, type_id)
            text = '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–Ω–∞, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª –≤ —Ä–∞–∑–¥–µ–ª–µ <b>–ú–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª</b>'
            await bot.delete_message(callback.message.chat.id, callback.message.message_id)
            await bot.send_message(user_id, text, reply_markup=keys.main_markup(), parse_mode='html')
        else:
            await callback.message.answer('–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–ª.')


    if action == "cancel":
        if req_type == 'anc':
            functions.refusal_of_request(req_type, type_id)
            text = '–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É.'
            await bot.delete_message(callback.message.chat.id, callback.message.message_id)
            await bot.send_message(user_id, text, reply_markup=keys.main_markup(), parse_mode='html')
        if req_type == 'money':
            functions.refusal_of_request(req_type, type_id)
            text = '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–∞.'
            await bot.delete_message(callback.message.chat.id, callback.message.message_id)
            await bot.send_message(user_id, text, reply_markup=keys.main_markup(), parse_mode='html')
        if req_type == 'requests':
            functions.refusal_of_request(req_type, type_id)
            text = '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.'
            await bot.delete_message(callback.message.chat.id, callback.message.message_id)
            await bot.send_message(user_id, text, reply_markup=keys.main_markup(), parse_mode='html')