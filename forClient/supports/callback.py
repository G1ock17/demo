from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery, ContentTypes
from main import dp, bot
from data import config
from database import functions
from aiogram.types import InlineKeyboardMarkup
from keyboards import keys


@dp.callback_query_handler(lambda c: c.data == 'get_gift')
async def support_request(callback: CallbackQuery):
    keyboard = keys.share_phone_markup()
    await bot.send_message(chat_id=callback.from_user.id, text=f'{callback.from_user.full_name}\n'
                                                               '–£ –Ω–∞—Å –¥–ª—è —Ç–µ–±—è –ø–æ–¥–∞—Ä–æ–∫ –∑–∞ –æ—Ç–∑—ã–≤. \n\n'
                                                               '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞ –Ω–µ–≥–æ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –±–æ–Ω—É—Å!\n'
                                                               '–ò–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º¬ª', reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data == 'support_request')
async def support_request(callback: CallbackQuery):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(keys.ikb('–ö–∞—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞', 'ask_quality_product'),
                 keys.ikb('–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞', 'ask_equipment_product'),
                 keys.ikb('–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å', 'ask_any_question'))

    await callback.message.answer(text='<b>–í—ã–±–µ—Ä–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—Ä–∞—â–µ–Ω–∏—è: </b>', reply_markup=keyboard,
                                  parse_mode='html')
    await callback.answer()


class UsedAsk(StatesGroup):
    asked = State()


@dp.callback_query_handler(lambda c: c.data.startswith('ask_'))
async def quality_product(callback: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        ask_type = callback.data.split('_', 1)[1]
        data['ask_type'] = ask_type

    await callback.message.answer(
        text=f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –¢–∞–∫–∂–µ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—â–∏–µ –ø—Ä–æ–±–ª–µ–º—É.\n'
             f'–û—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á.\n'
             f'–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ —Å–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', reply_markup=keys.confirm_markup(),
        parse_mode='html')
    await UsedAsk.asked.set()
    await callback.answer()


@dp.message_handler(state=UsedAsk.asked)
async def enter_key2(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['ask'] = message.text
    if message.text == '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        await state.finish()
        await message.answer(text=f'–ì–æ—Ç–æ–≤–æ!\n–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á.', reply_markup=keys.confirm_markup(),
                             parse_mode='html')
    else:
        if data['ask_type'] == 'quality_product':
            await bot.send_message(chat_id=config.GROUP_ID,
                                   text=f"{message.from_user.id}\n–ö–∞—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞\n{data['ask']}")
        if data['ask_type'] == 'equipment_product':
            await bot.send_message(chat_id=config.GROUP_ID,
                                   text=f"{message.from_user.id}\n–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞\n{data['ask']}")
        if data['ask_type'] == 'any_question':
            await bot.send_message(chat_id=config.GROUP_ID,
                                   text=f"{message.from_user.id}\n–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å\n{data['ask']}")

        await message.answer(text=f'–ï—Å–ª–∏ –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –≤—Å–µ —á—Ç–æ —Ö–æ—Ç–µ–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
                             reply_markup=keys.confirm_markup(),
                             parse_mode='html')


@dp.message_handler(content_types=['photo'], state=UsedAsk.asked)
async def send_photo_to_group(message: Message, state: FSMContext):
    photo = message.photo[-1]
    await bot.send_photo(chat_id=config.GROUP_ID, photo=photo.file_id, caption=f'{message.from_user.id}')
    # 3-4

    await message.answer("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –ï—Å–ª–∏ –≤—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ –≤—Å–µ —Å–≤–æ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞–∂–º–∏—Ç–µ ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")


@dp.message_handler(content_types=ContentTypes.TEXT)
async def handle_text_message(message: Message):
    if message.reply_to_message:
        if message.chat.id == config.GROUP_ID:
            user_id = int(message.reply_to_message.text.split('\n')[0])
            await bot.send_message(chat_id=user_id, text=message.text)


@dp.callback_query_handler(lambda callback: callback.data.startswith(('confirm_', 'rewrite_')))
async def handle_confirmation(callback: CallbackQuery, state: FSMContext):
    action, phone_number = callback.data.split('_')
    if action == "confirm":
        functions.add_phone(callback.from_user.id, phone_number)
        print(phone_number, callback.message.from_user.id)
        await bot.answer_callback_query(callback.id)
        await state.update_data(confirm=True)

        await bot.send_message(callback.from_user.id,
                               '–û—Ç–ª–∏—á–Ω–æ! –ê —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>—Å–∫—Ä–∏–Ω—à–æ—Ç</b> —Ç–≤–æ–µ–≥–æ –æ—Ç–∑—ã–≤–∞ –æ —Ç–æ–≤–∞—Ä–µ. '
                               '–ú—ã –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∏–º –∏ –ø—Ä–∏—à–ª–µ–º –ø–æ–¥–∞—Ä–æ–∫.\n\n'
                               '–ï—Å–ª–∏ –æ—Ç–∑—ã–≤ –µ—â–µ –Ω–µ –æ—Å—Ç–∞–≤–ª–µ–Ω, —Ç–æ –º–æ–∂–Ω–æ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å üòÑ', parse_mode='html')

    elif action == "rewrite":
        await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –µ—â–µ —Ä–∞–∑.")


@dp.callback_query_handler(lambda callback: callback.data in ['bonus_sent', 'reject'], state='*')
async def feedback_confirmation_callback(callback: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback.id)

    data = await state.get_data()
    sub_status = functions.get_sub_status(callback.from_user.id)
    phone = functions.get_user_phone(callback.from_user.id)
    if callback.data == 'bonus_sent':
        if sub_status:  # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–¥–∞—Ä–∫–æ–≤
            functions.switch_sub_status(callback.from_user.id)
            await bot.send_message(callback.from_user.id, '‚úÖ –ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\n'
                                                          f'–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –ú—ã –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –∏ –∑–∞—á–∏—Å–ª–∏–ª–∏ –≤–∞–º –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone}')
            await bot.send_message(callback.from_user.id,
                                   f'{callback.from_user.full_name} –µ—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n- –ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É')
        else:
            await bot.send_message(callback.from_user.id, '‚ùå –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –ø–æ–¥–∞—Ä–æ–∫\n'
                                                          '–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è')
    elif callback.data == 'reject':
        await bot.send_message(callback.from_user.id, '‚ùå –û—Ç–∑—ã–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω\n'
                                                      '–°–æ–∂–∞–ª–µ–µ–º, –Ω–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()
