from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery, ContentTypes, InputMediaPhoto
from main import dp, bot
from data import config
from database import functions
from aiogram.types import InlineKeyboardMarkup
from keyboards import keys

from supports.menu import GiftState, Review


class UsedAsk(StatesGroup):
    asked = State()


@dp.callback_query_handler(lambda c: c.data == 'get_gift')
async def support_request(callback: CallbackQuery):
    await bot.send_message(chat_id=callback.from_user.id, text=f'{callback.from_user.full_name}\n'
                                                               '–£ –Ω–∞—Å –¥–ª—è —Ç–µ–±—è –ø–æ–¥–∞—Ä–æ–∫ –∑–∞ –æ—Ç–∑—ã–≤. \n\n'
                                                               '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞ –Ω–µ–≥–æ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –±–æ–Ω—É—Å!\n'
                                                               '–ò–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º¬ª',
                           reply_markup=keys.share_phone_markup())
    await GiftState.WaitingForPhoneNumber.set()


@dp.callback_query_handler(lambda c: c.data == 'support_request')
async def support_request(callback: CallbackQuery):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(keys.ikb('–ö–∞—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞', 'ask_quality_product'),
                 keys.ikb('–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞', 'ask_equipment_product'),
                 keys.ikb('–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å', 'ask_any_question'))

    await callback.message.answer(text='<b>–í—ã–±–µ—Ä–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—Ä–∞—â–µ–Ω–∏—è: </b>', reply_markup=keyboard,
                                  parse_mode='html')
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('ask_'))
async def quality_product(callback: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        ask_type = callback.data.split('_', 1)[1]
        data['ask_type'] = ask_type

    await callback.message.answer(
        text=f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –¢–∞–∫–∂–µ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—â–∏–µ –ø—Ä–æ–±–ª–µ–º—É.\n'
             f'–û—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á.\n'
             f'–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ —Å–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', reply_markup=keys.confirm_markup(),
        parse_mode='html')
    await UsedAsk.asked.set()
    await callback.answer()


@dp.message_handler(content_types=ContentTypes.TEXT, state=UsedAsk.asked)
async def enter_key1(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['ask'] = message.text

    if message.text == '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        functions.add_log('requests')
        await state.finish()
        await message.answer(text=f'–ì–æ—Ç–æ–≤–æ!\n–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á.', reply_markup=keys.main_markup(),
                             parse_mode='html')
        return

    type_ask = None

    if data['ask_type'] == 'quality_product':
        type_ask = '–ö–∞—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞'
    elif data['ask_type'] == 'equipment_product':
        type_ask = '–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞'
    elif data['ask_type'] == 'any_question':
        type_ask = '–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å'

    await bot.send_message(chat_id=config.GROUP_ID,
                           text=f"{message.from_user.id}\n{type_ask}\n{data['ask']}")

    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ï—Å–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤—Å–µ —Ö–æ—Ç–µ–ª–∏, –Ω–∞–∂–º–∏—Ç–µ ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")


@dp.message_handler(content_types=ContentTypes.PHOTO, state=UsedAsk.asked)
async def enter_key2(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['ask'] = message.text
    type_ask = None
    if data['ask_type'] == 'quality_product':
        type_ask = '–ö–∞—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞'
    elif data['ask_type'] == 'equipment_product':
        type_ask = '–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞'
    elif data['ask_type'] == 'any_question':
        type_ask = '–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å'

    await state.update_data(screenshot=message.photo[-1])
    photo = message.photo[-1]
    await bot.send_photo(chat_id=config.GROUP_ID, photo=photo.file_id, caption=f'{message.from_user.id}\n{type_ask}')
    await message.answer('–í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é ‚úÖ')


@dp.message_handler(content_types=ContentTypes.ANY)
async def handle_text_message(message: Message):
    if message.reply_to_message:
        if message.chat.id == config.GROUP_ID:
            user_id = int(message.reply_to_message.text.split('\n')[0])
            await bot.send_message(chat_id=user_id, text=message.text)
            functions.add_log('answers')
            functions.add_answer_logs(message.from_user.username, message.text)
            await bot.send_message(chat_id=config.GROUP_ID, text='–í–∞—à –æ—Ç–≤–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
            hesoyam = functions.get_answers_logs()
            print(functions.get_answers_logs())


@dp.callback_query_handler(lambda callback: callback.data.startswith(('confirm_', 'rewrite_')), state=GiftState.WaitingForPhoneNumber)
async def handle_confirmation(callback: CallbackQuery, state: FSMContext):
    action, phone_number = callback.data.split('_')
    if action == "confirm":
        functions.add_phone(callback.from_user.id, phone_number)

        await bot.answer_callback_query(callback.id)
        await Review.WaitingForReview.set()
        await bot.send_message(chat_id=callback.from_user.id, text=
                               '–û—Ç–ª–∏—á–Ω–æ! –ê —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>—Å–∫—Ä–∏–Ω—à–æ—Ç</b> —Ç–≤–æ–µ–≥–æ –æ—Ç–∑—ã–≤–∞ –æ —Ç–æ–≤–∞—Ä–µ. '
                               '–ú—ã –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∏–º –∏ –ø—Ä–∏—à–ª–µ–º –ø–æ–¥–∞—Ä–æ–∫.\n\n'
                               '–ï—Å–ª–∏ –æ—Ç–∑—ã–≤ –µ—â–µ –Ω–µ –æ—Å—Ç–∞–≤–ª–µ–Ω, —Ç–æ –º–æ–∂–Ω–æ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å üòÑ', reply_markup=keys.main_markup(), parse_mode='html')

    elif action == "rewrite":
        await GiftState.WaitingForPhoneNumber.set()
        await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –µ—â–µ —Ä–∞–∑.")


@dp.callback_query_handler(lambda callback: callback.data in ['bonus_sent', 'reject'])
async def feedback_confirmation_callback(callback: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback.id)
    sub_status = functions.get_sub_status(callback.from_user.id)
    phone = functions.get_user_phone(callback.from_user.id)
    if callback.data == 'bonus_sent':
        if sub_status:  # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–¥–∞—Ä–∫–æ–≤
            functions.switch_sub_status(callback.from_user.id)
            await bot.send_message(callback.from_user.id, '‚úÖ –ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\n'
                                                          f'–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –ú—ã –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –∏ –∑–∞—á–∏—Å–ª–∏–ª–∏ –≤–∞–º –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone}')
            await bot.send_message(chat_id=callback.from_user.id,
                                   text=f'{callback.from_user.full_name} –µ—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n- –ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É',
                                   reply_markup=keys.main_markup(), parse_mode='html')
        else:
            await bot.send_message(callback.from_user.id, '‚ùå –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –ø–æ–¥–∞—Ä–æ–∫\n'
                                                          '–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è')
    elif callback.data == 'reject':
        await bot.send_message(chat_id=callback.from_user.id,
                               text='‚ùå –û—Ç–∑—ã–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω\n–°–æ–∂–∞–ª–µ–µ–º, –Ω–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                               reply_markup=keys.main_markup(), parse_mode='html')
    await state.finish()
