from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, ContentTypes, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from main import dp, bot
from data import config
from database import functions
from keyboards import keys
import datetime
import openpyxl

# sheet_index = "https://docs.google.com/spreadsheets/d/11Pp0kiyCf1o_IAiJf2NNbzV4"
#
#
# def connecting_gsheet(sheet_index=1) -> pygsheets.Spreadsheet:
#     gc = pygsheets.authorize(service_account_file="google/service-account.json")
#     return gc.open_by_key(config.SHEET_KEY)[sheet_index]
#
#
# def add_data_to_sheet(worksheet, values: list, next_empty_row: int, last_iteration: bool = False, financials=None) -> bool:
#     try:
#         if last_iteration and financials:
#             values.extend(financials)
#             range_to_update = f"A{next_empty_row}:N{next_empty_row}"
#         else:
#             range_to_update = f"A{next_empty_row}:J{next_empty_row}"
#
#         worksheet.update_values(range_to_update, [values])
#         return True
#     except Exception as e:
#         print(e)
#         return False


class GiftState(StatesGroup):
    WaitingForPhoneNumber = State()


class Review(StatesGroup):
    WaitingForReview = State()


def column_number_to_letter(column_number):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —á–∏—Å–ª–æ–≤–æ–π –∏–Ω–¥–µ–∫—Å —Å—Ç–æ–ª–±—Ü–∞ –≤ –±—É–∫–≤–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å."""
    result = ""
    while column_number > 0:
        remainder = (column_number - 1) % 26
        result = chr(65 + remainder) + result
        column_number = (column_number - 1) // 26
    return result


@dp.message_handler(Command('start'))
async def start(message: Message):
    if functions.check_new_user(message.from_user.id):
        functions.add_user(message.from_user.id)
    else:
        pass

    keyboard = InlineKeyboardMarkup()
    keyboard.add(keys.ikb('–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫', 'get_gift'), keys.ikb('–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É', 'support_request'))
    await bot.send_message(chat_id=message.chat.id,
                           text='–ü—Ä–∏–≤–µ—Ç! –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º —Ç–µ–±—è –∑–∞ –ø–æ–∫—É–ø–∫—É!'
                                '\n–ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ —Ç–µ–±–µ –∏–ª–∏ —Ç–≤–æ–∏–º –±–ª–∏–∑–∫–∏–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –Ω–∞—à —Ç–æ–≤–∞—Ä.  –í –∫–∞—á–µ—Å—Ç–≤–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ, –º—ã —Ö–æ—Ç–∏–º —Ç–µ–±–µ —Å–¥–µ–ª–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ üéÅ',
                           reply_markup=keyboard, parse_mode='html')


@dp.message_handler(text='–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É')
async def support_request2(message: Message):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(keys.ikb('–ö–∞—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞', 'ask_quality_product'),
                 keys.ikb('–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞', 'ask_equipment_product'),
                 keys.ikb('–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å', 'ask_any_question'))
    await message.answer(text='<b>–í—ã–±–µ—Ä–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—Ä–∞—â–µ–Ω–∏—è: </b>', reply_markup=keyboard,
                         parse_mode='html')


@dp.message_handler(text='–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫')
async def get_gift(message: Message):
    keyboard = keys.share_phone_markup()
    await bot.send_message(chat_id=message.from_user.id, text=f'{message.from_user.full_name}\n'
                                                              '–£ –Ω–∞—Å –¥–ª—è —Ç–µ–±—è –ø–æ–¥–∞—Ä–æ–∫ –∑–∞ –æ—Ç–∑—ã–≤. \n\n'
                                                              '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞ –Ω–µ–≥–æ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –±–æ–Ω—É—Å!\n'
                                                              '–ò–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º¬ª',
                           reply_markup=keyboard)
    await GiftState.WaitingForPhoneNumber.set()


@dp.message_handler(text='–û—Ç—Å—á–µ—Ç')
async def get_info_logs(message: Message):
    if message.from_user.id in config.ADMINS:
        logs = functions.get_info_logs()
        rows = functions.get_answers_logs()
        requests_value = logs[0]
        answers_value = logs[1]
        wb = openpyxl.Workbook()
        sheet = wb.active

        sheet['A1'] = '–î–∞—Ç–∞'
        sheet['B1'] = '–°–æ–æ–±—â–µ–Ω–∏–µ'
        sheet['C1'] = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        sheet['H1'] = "–í—Å–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏–π"
        sheet['I1'] = "–û—Ç–≤–µ—Ç–æ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞"

        start_row = 2  # –ù–∞—á–∏–Ω–∞–µ–º —Å 2, —Ç–∞–∫ –∫–∞–∫ 1 —Å—Ç—Ä–æ–∫–∞ –æ–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤

        for index, value in enumerate((rows[0:][1][0]), start=2):
            sheet[f'A{index}'] = value
        for index, value in enumerate(rows[0:][1], start=2):
            sheet[f'B{index}'] = value
        for index, value in enumerate(rows[0:][2], start=2):
            sheet[f'C{index}'] = value

        sheet['I2'] = requests_value
        sheet['H2'] = answers_value

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –∏ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —è—á–µ–π–∫—É
        if requests_value < answers_value:
            sheet['I2'].fill = openpyxl.styles.PatternFill(start_color='FF0000', end_color='FF0000',
                                                           fill_type='solid')  # –ö—Ä–∞—Å–Ω—ã–π
        elif requests_value == answers_value:
            sheet['I2'].fill = openpyxl.styles.PatternFill(start_color='00FF00', end_color='00FF00',
                                                           fill_type='solid')  # –ó–µ–ª–µ–Ω—ã–π
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        wb.save('example.xlsx')

        with open('example.xlsx', 'rb') as excel_file:
            await message.reply_document(excel_file)



@dp.message_handler(text='–û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É')
async def clear_logs(message: Message):
    if message.from_user.id in config.ADMINS:
        pass


@dp.message_handler(Command('close'))
async def handle_message(message: Message):
    if message.from_user.id in config.ADMINS:
        command, *args = message.get_full_command()

        if args:
            try:
                user_id = int(args[0])
                keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
                keyboard.add(KeyboardButton('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º', request_contact=True))
                await bot.send_message(chat_id=user_id,
                                       text=f'{message.from_user.full_name}, —Ä–∞–¥—ã, —á—Ç–æ —É–¥–∞–ª–æ—Å—å —Ä–µ—à–∏—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å!\n'
                                            '–£ –Ω–∞—Å –¥–ª—è —Ç–µ–±—è –ø–æ–¥–∞—Ä–æ–∫ –∑–∞ –æ—Ç–∑—ã–≤. \n\n'
                                            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞ –Ω–µ–≥–æ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –±–æ–Ω—É—Å!\n'
                                            '–ò–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º¬ª',
                                       reply_markup=keyboard)
            except ValueError:
                await message.answer("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


@dp.message_handler(state=GiftState.WaitingForPhoneNumber, content_types=ContentTypes.TEXT)
async def handle_phone_number(message: Message, state: FSMContext):
    if message.text.isdigit() and len(message.text) == 11:
        phone_number = message.text
        print(phone_number)
        await message.answer(f"–¢—ã –≤–≤–µ–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}\n\n"
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏, —á—Ç–æ –Ω–æ–º–µ—Ä –≤–µ—Ä–Ω—ã–π:",
                             reply_markup=keys.get_confirmation_keyboard(phone_number))
        await state.finish()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")


@dp.message_handler(content_types=ContentTypes.CONTACT, state=GiftState.WaitingForPhoneNumber)
async def handle_contact1(message: Message):
    phone_number = message.contact.phone_number
    await message.answer(f"–¢—ã –ø–æ–¥–µ–ª–∏–ª—Å—è –Ω–æ–º–µ—Ä–æ–º: {phone_number}\n\n"
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏, —á—Ç–æ –Ω–æ–º–µ—Ä –≤–µ—Ä–Ω—ã–π:",
                         reply_markup=keys.get_confirmation_keyboard(phone_number))


@dp.message_handler(content_types=ContentTypes.TEXT, state=Review.WaitingForReview)
async def handle_photo(message: Message):
    await message.answer('–ù–∞–º –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ —Å–∫—Ä–∏–Ω—à–æ—Ç.')


@dp.message_handler(content_types=ContentTypes.PHOTO, state=Review.WaitingForReview)
async def handle_photo(message: Message, state: FSMContext):
    await state.update_data(screenshot=message.photo[-1])
    photo = message.photo[-1]
    phone = functions.get_user_phone(message.from_user.id)
    await bot.send_photo(chat_id=config.GROUP_ID, photo=photo.file_id,
                         caption=f'{message.from_user.id}\n–ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —ç—Ç–æ—Ç –æ—Ç–∑—ã–≤ –∏ –Ω–∞—á–∏—Å–ª–∏—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–∞ –Ω–æ–º–µ—Ä <b>{phone}</b>',
                         reply_markup=keys.get_feedback_confirmation_keyboard(), parse_mode='html')
    await message.answer('–í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é ‚úÖ', reply_markup=keys.main_markup())
    await state.finish()
