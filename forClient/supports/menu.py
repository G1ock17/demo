from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, ContentTypes, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from main import dp, bot
from data import config
from database import functions
from keyboards import keys
from filters import IsUser
from filters import IsAdmin


@dp.message_handler(Command('start'))
async def start(message: Message):
    if functions.check_new_user(message.from_user.id):
        functions.add_user(message.from_user.id)
    else:
        pass

    keyboard = InlineKeyboardMarkup()
    keyboard.add(keys.ikb('–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫', 'get_gift'), keys.ikb('–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É', 'support_request'))
    await bot.send_message(chat_id=message.chat.id,
                           text='–ü—Ä–∏–≤–µ—Ç! –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º —Ç–µ–±—è –∑–∞ –ø–æ–∫—É–ø–∫—É!'
                                '\n–ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ —Ç–µ–±–µ –∏–ª–∏ —Ç–≤–æ–∏–º –±–ª–∏–∑–∫–∏–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –Ω–∞—à —Ç–æ–≤–∞—Ä.  –í –∫–∞—á–µ—Å—Ç–≤–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ, –º—ã —Ö–æ—Ç–∏–º —Ç–µ–±–µ —Å–¥–µ–ª–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ üéÅ',
                           reply_markup=keyboard, parse_mode='html')


@dp.message_handler(text='–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É')
async def support_request2(message: Message):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(keys.ikb('–ö–∞—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞', 'ask_quality_product'),
                 keys.ikb('–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞', 'ask_equipment_product'),
                 keys.ikb('–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å', 'ask_any_question'))
    await message.answer(text='<b>–í—ã–±–µ—Ä–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—Ä–∞—â–µ–Ω–∏—è: </b>', reply_markup=keyboard, parse_mode='html')


@dp.message_handler(text='–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫')
async def get_gift(message: Message):
    keyboard = keys.share_phone_markup()
    await bot.send_message(chat_id=message.from_user.id, text=f'{message.from_user.full_name}\n'
                                '–£ –Ω–∞—Å –¥–ª—è —Ç–µ–±—è –ø–æ–¥–∞—Ä–æ–∫ –∑–∞ –æ—Ç–∑—ã–≤. \n\n'
                                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞ –Ω–µ–≥–æ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –±–æ–Ω—É—Å!\n'
                                '–ò–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º¬ª', reply_markup=keyboard)


@dp.message_handler(Command('close'))
async def handle_message(message: Message):
    if message.from_user.id in config.ADMINS:
        command, *args = message.get_full_command()

        if args:
            try:
                user_id = int(args[0])
                keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
                keyboard.add(KeyboardButton('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º', request_contact=True))
                await bot.send_message(chat_id=user_id,
                                       text=f'{message.from_user.full_name}, —Ä–∞–¥—ã, —á—Ç–æ —É–¥–∞–ª–æ—Å—å —Ä–µ—à–∏—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å!\n'
                                            '–£ –Ω–∞—Å –¥–ª—è —Ç–µ–±—è –ø–æ–¥–∞—Ä–æ–∫ –∑–∞ –æ—Ç–∑—ã–≤. \n\n'
                                            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞ –Ω–µ–≥–æ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –±–æ–Ω—É—Å!\n'
                                            '–ò–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º¬ª',
                                       reply_markup=keyboard)
            except ValueError:
                await message.answer("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


@dp.message_handler(content_types=ContentTypes.CONTACT)
async def handle_contact(message: Message):
    phone_number = message.contact.phone_number
    print(phone_number)
    await message.answer(f"–¢—ã –ø–æ–¥–µ–ª–∏–ª—Å—è –Ω–æ–º–µ—Ä–æ–º: {phone_number}\n\n"
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏, —á—Ç–æ –Ω–æ–º–µ—Ä –≤–µ—Ä–Ω—ã–π:",
                         reply_markup=keys.get_confirmation_keyboard(phone_number))


@dp.message_handler(content_types=ContentTypes.PHOTO, state='*')
async def handle_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    confirm = data.get('confirm', False)
    if not confirm:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–∑—ã–≤–∞ –∫–Ω–æ–ø–∫–æ–π '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –æ—Ç–∑—ã–≤–æ–º'.")
        return
    await message.answer(f"üí¨–°—É–ø–µ—Ä, —Å–ø–∞—Å–∏–±–æ!"
                         "–°–∫–æ—Ä–æ –º—ã –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∏–º. –û—Ç–≤–µ—Ç –ø–æ—Å—Ç—É–ø–∏—Ç –≤ —ç—Ç–æ—Ç –±–æ—Ç - –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ –µ–≥–æ.")
    await state.update_data(screenshot=message.photo[-1])
    photo = message.photo[-1]
    phone = functions.get_user_phone(message.from_user.id)
    await bot.send_photo(chat_id=config.GROUP_ID, photo=photo.file_id, caption=f'{message.from_user.id}')
    await bot.send_message(chat_id=config.GROUP_ID,
                           text=f'–ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —ç—Ç–æ—Ç –æ—Ç–∑—ã–≤ –∏ –Ω–∞—á–∏—Å–ª–∏—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–∞ –Ω–æ–º–µ—Ä {phone}\n\n',
                           reply_markup=keys.get_feedback_confirmation_keyboard())
