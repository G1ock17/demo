from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery, PreCheckoutQuery, LabeledPrice
from main import dp, bot
import asyncio, sqlite3, re, func
import keys as kb
from data import config


@dp.message_handler(Command('menu'))
async def menu_message(message: Message):
    if message.from_user.id == ADMINS:
        await message.answer(text='<b>Welcome BOSS!</b>', reply_markup=kb.main_admin, parse_mode='html')
    else:
        await message.answer(text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>', reply_markup=kb.main, parse_mode='html')


@dp.message_handler(Command('regist'))
async def start(message: Message):
    connect = sqlite3.connect('db.db')
    cursor = connect.cursor()
    cursor.execute("""SELECT user_id FROM info WHERE user_id=?""", [message.chat.id])
    user = cursor.fetchone()
    connect.commit()
    if not user:
        cursor.execute("""INSERT INTO info(user_tgname, user_id, sub_status, date) VALUES(?, ?, ?, ?)""",
                       [message.chat.first_name, message.chat.id, 0, date])
        connect.commit()
        cursor.close()
        connect.close()
        await AwaitMessages.fio_add.set()
        await bot.send_message(chat_id=message.chat.id, text='–í–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:', reply_markup=kb.main)
    else:
        await bot.send_message(chat_id=message.chat.id, text='–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!', reply_markup=kb.main)


@dp.message_handler(text='–û –Ω–∞—Å  üìñ')
async def aboutus(message: Message):
    if (func.is_registered(message.chat.id)):
        await bot.send_message(chat_id=message.chat.id,
                               text='‚≠êÔ∏è <b>–ß—Ç–æ —Ç–∞–∫–æ–µ GlockGPTChat</b> ‚≠êÔ∏è'
                                    '\n\nüìÉ <b>GlockGPTChat</b> - —ç—Ç–æ –±–æ—Ç –≤ Telegram, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ–ª—É—á–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É—è –º–æ—â–Ω—É—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –æ—Ç <b>OpenAI.</b>'
                                    '\n–ë–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø–æ–∏—Å–∫ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–º –∏ –±—ã—Å—Ç—Ä—ã–º.'
                                    '\n\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b> –º–æ–≥—É—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏: –Ω–∞ <b>7, 30 –∏–ª–∏ 60 –¥–Ω–µ–π.</b>'
                                    '\n\n<b>–ü–æ–¥–ø–∏—Å–∫–∞</b> –¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞, —É–≤–µ–ª–∏—á–∏–≤–∞—è –ª–∏–º–∏—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –¥–æ <b>200</b> –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏.',
                               parse_mode='html', reply_markup=kb.subs)
    else:
        await bot.send_message(chat_id=message.chat.id,
                               text=f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ‚ùå", parse_mode='html')


@dp.message_handler(text='–ü–æ–¥–ø–∏—Å–∫–∏ ‚≠êÔ∏è')
async def subs(message: Message):
    if (func.is_registered(message.chat.id)):
        await bot.send_message(chat_id=message.chat.id,
                               text='‚≠êÔ∏è <b>C—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</b> ‚≠êÔ∏è'
                                    '\n\nüìÉ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>'
                                    '\n–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º ChatGpt.'
                                    '\n–ö–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ–ª—É—á–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç.'
                                    '\n ChatGPT –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö, –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö, —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏ –¥—Ä—É–≥–∏—Ö –æ—Ç—Ä–∞—Å–ª—è—Ö.'
                                    '\n\n<b>‚ûï –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏:</b>'
                                    '\n<b> ‚Äî –î–æ 200 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏</b>'
                                    '\n<b> ‚Äî –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã</b>'
                                    '\n<b> ‚Äî –°–Ω–∏–∂–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–æ 15 —Å–µ–∫—É–Ω–¥</b>',
                               parse_mode='html', reply_markup=kb.catalog_list)
    else:
        await bot.send_message(chat_id=message.chat.id,
                               text=f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ‚ùå", parse_mode='html')


@dp.message_handler(text='–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ üõ†Ô∏è')
async def check_have_time(message: Message):
    if (func.is_registered(message.chat.id)):
        have_time_sub = func.check_sub_status(message.chat.id) // 3600
        if have_time_sub > 0:
            await bot.send_message(chat_id=message.chat.id,
                                   text=f"–î–æ –∫–æ–Ω—Ü–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å <b>{have_time_sub}</b> —á–∞—Å–æ–≤ ‚åõÔ∏è",
                                   parse_mode='html')
        else:
            await bot.send_message(chat_id=message.chat.id,
                                   text=f"–ü–æ–¥–ø–∏—Å–∫–∞ <b>–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</b> ‚ùå", parse_mode='html')
    else:
        await bot.send_message(chat_id=message.chat.id,
                               text=f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ‚ùå", parse_mode='html')


@dp.message_handler(text='glck')
async def adm_glck(message: Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer(text='<b>Glock –Ω–∞ –º–µ—Å—Ç–µ!</b>', reply_markup=kb.admin_panel, parse_mode='html')
    else:
        await message.answer(text='–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é!')


@dp.message_handler(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def admin_panel(message: Message):
    await message.answer(text='<b>Main menu !</b>', reply_markup=kb.main_admin, parse_mode='html')


class NewsLetter(StatesGroup):
    text_news = State()


class NewKeys(StatesGroup):
    key_value = State()
    key_time = State()


class NewDocs(StatesGroup):
    QnumbSchet = State()
    Qdate = State()
    QbuyerData = State()
    QnumbContract = State()
    Qroute = State()
    QrouteDate = State()
    Qprice = State()



        # conn = sqlite3.connect('db.db')
        # cursor = conn.cursor()
        # cursor.execute("SELECT key, time, user, status FROM keys")
        # users = cursor.fetchall()


@dp.message_handler(text='–°–æ–∑–¥–∞—Ç—å –∞–∫—Ç-—Å—á–µ—Ç')
async def make_docs(message: Message):
    await message.answer(text='<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á–µ—Ç-–∞–∫—Ç–∞</b>', reply_markup=kb.admin_panel, parse_mode='html')
    await NewDocs.QnumbSchet.set()


@dp.message_handler(state=NewDocs.QnumbSchet)
async def make_docs(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['numbSchet'] = message.text
    await message.answer(text='<b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏\n–ü—Ä–∏–º–µ—Ä: 20 –º–∞—è 2023</b>', parse_mode='html')
    await NewDocs.Qdate.set()


@dp.message_handler(state=NewDocs.Qdate)
async def make_docs(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['date'] = message.text
    await message.answer(text='<b>–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—á–∏–∫–∞</b>', parse_mode='html')
    await NewDocs.QbuyerData.set()


@dp.message_handler(state=NewDocs.QbuyerData)
async def make_docs(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['buyerData'] = message.text
    await message.answer(text='<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞</b>', parse_mode='html')
    await NewDocs.QnumbContract.set()


@dp.message_handler(state=NewDocs.QnumbContract)
async def make_docs(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['numbContract'] = message.text
    await message.answer(text='<b>–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –ø–æ–µ–∑–¥–∫–∏:</b>', parse_mode='html')
    await NewDocs.Qroute.set()


@dp.message_handler(state=NewDocs.Qroute)
async def make_docs(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['route'] = message.text
    await message.answer(text='<b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ—Å—Ç–æ–≤–ª–µ–Ω–∏—è –¥–æ–≥–æ–≤—Ä–∞:\n–ü—Ä–∏–º–µ—Ä: 20 –º–∞—è 2023</b>', parse_mode='html')
    await NewDocs.QrouteDate.set()


@dp.message_handler(state=NewDocs.QrouteDate)
async def make_docs(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['routeDate'] = message.text
    await message.answer(text='<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–≥–æ–≤—Ä–∞:</b>', parse_mode='html')
    await NewDocs.Qprice.set()


@dp.message_handler(state=NewDocs.Qprice)
async def make_docs(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['price'] = message.text
    schet_adr, akt_adr = func.create_docs(data['numbSchet'], data['date'], data['buyerData'], data['numbContract'],
                                          data['route'], data['routeDate'], data['price'])
    await state.finish()
    await message.answer(text='<b>–ì–æ—Ç–æ–≤–æ ‚úÖ</b>', parse_mode='html')
    with open(schet_adr, 'rb') as excel_file:
        await message.reply_document(excel_file)
    with open(akt_adr, 'rb') as excel_file:
        await message.reply_document(excel_file)


@dp.message_handler(text='–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
async def newsletter(message: Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer(text='<b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:</b>', parse_mode='html')
        await NewsLetter.text_news.set()
    else:
        await message.answer(text='–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é!')




class AwaitMessages(StatesGroup):
    fio_add = State()
    phone_add = State()
    bank_name = State()
    bik = State()
    r_akk = State()
    k_akk = State()


@dp.message_handler(state=AwaitMessages.fio_add)
async def process_fio_add(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['fio'] = message.text
        match = re.search(r"\b\w{3,12}\b", data['fio'])
        if match:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üìû')
            await AwaitMessages.phone_add.set()
        else:
            await AwaitMessages.fio_add.set()
            await message.answer('–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 3 –¥–æ 12 —Å–∏–º–≤–æ–ª–æ–≤ üö´')


@dp.message_handler(state=AwaitMessages.phone_add)
async def process_fio_add(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['phone'] = message.text
        phone_numbers = re.findall(r'\d{10,13}', data['phone'])
        if phone_numbers:
            connect = sqlite3.connect('db.db')
            cursor = connect.cursor()
            cursor.execute("UPDATE info SET user_phone=?, user_name=? WHERE user_id=?",
                           [data["phone"], data["fio"], message.chat.id])
            cursor.close()
            connect.commit()
            connect.close()
            await state.finish()
            await message.answer(f'–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ‚úÖ')
        else:
            await AwaitMessages.phone_add.set()
            await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚õîÔ∏è'
                                 f'\n–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ 10-13 —Ü–∏—Ñ—Ä!')


@dp.message_handler(Command('check'))
async def check(message):
    if message.from_user.id == ADMIN_ID:
        keyboard = func.make_pay_inline_key[0](
            'https://yoomoney.ru/checkout/payments/v2/contract/bankcard?orderId=2bf84144-000f-5000-a000-1722b6f481dd')
        await message.answer(text='<b>Welcome BOSS!</b>', reply_markup=keyboard, parse_mode='html')


